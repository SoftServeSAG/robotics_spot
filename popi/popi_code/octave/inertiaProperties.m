%% Inertia properties expressed in the default link-frame, for each
%% link of the robot popi.
%%
%% OUT = INERTIAPROPERTIES(CONSTS, PARAMS)
%%
%% OUT is a structure with a field for each link of the robot, each
%% field being in turn a struct with the inertia properties.
%%
%% Depending on the original robot model and on the code generator
%% configuration, this function may take up to two arguments:
%%
%% CONSTS is a struct with all the constant properties
%% of the robot model; it is required if constant-folding was disabled
%% during code generation. Otherwise, the constant numerical properties
%% of the model appear explicitly as float literals.
%%
%% PARAMS is a struct with the current value of the
%% possibly varying model properties, i.e. the model parameters. This
%% argument is required if the original robot model is parametric. If
%% not, ignore the argument.
%%
%% This file has been automatically generated by RobCoGen.

function out = inertiaProperties(consts, params)

out.lf_base.mass   = consts.m_base;
out.lf_base.com    = [0.0; 0.0; 0.0];
out.lf_base.tensor = ...
    [[ consts.ix_base  ,	-(0.0),	-(0.0)];
    [-(0.0),	  consts.iy_base  ,	-(0.0)];
    [-(0.0),	-(0.0),	  consts.iz_base]];

com = out.lf_base.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_base.mass;
out.lf_base.tensor6D = [out.lf_base.tensor, block; block', out.lf_base.mass*eye(3)];


out.lf_EpauleAVD.mass   = consts.m_EpauleAVD;
out.lf_EpauleAVD.com    = [0.0; 0.0; 0.0];
out.lf_EpauleAVD.tensor = ...
    [[ consts.ix_EpauleAVD  ,	-(consts.ixy_EpauleAVD),	-(consts.ixz_EpauleAVD)];
    [-(consts.ixy_EpauleAVD),	  consts.iy_EpauleAVD  ,	-(consts.iyz_EpauleAVD)];
    [-(consts.ixz_EpauleAVD),	-(consts.iyz_EpauleAVD),	  consts.iz_EpauleAVD]];

com = out.lf_EpauleAVD.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_EpauleAVD.mass;
out.lf_EpauleAVD.tensor6D = [out.lf_EpauleAVD.tensor, block; block', out.lf_EpauleAVD.mass*eye(3)];


out.lf_HJambeAVD.mass   = consts.m_HJambeAVD;
out.lf_HJambeAVD.com    = [0.0; 0.0; 0.0];
out.lf_HJambeAVD.tensor = ...
    [[ consts.ix_HJambeAVD  ,	-(consts.ixy_HJambeAVD),	-(consts.ixz_HJambeAVD)];
    [-(consts.ixy_HJambeAVD),	  consts.iy_HJambeAVD  ,	-(consts.iyz_HJambeAVD)];
    [-(consts.ixz_HJambeAVD),	-(consts.iyz_HJambeAVD),	  consts.iz_HJambeAVD]];

com = out.lf_HJambeAVD.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_HJambeAVD.mass;
out.lf_HJambeAVD.tensor6D = [out.lf_HJambeAVD.tensor, block; block', out.lf_HJambeAVD.mass*eye(3)];


out.lf_BJambeAVD.mass   = consts.m_BJambeAVD;
out.lf_BJambeAVD.com    = [0.0; 0.0; 0.0];
out.lf_BJambeAVD.tensor = ...
    [[ consts.ix_BJambeAVD  ,	-(consts.ixy_BJambeAVD),	-(consts.ixz_BJambeAVD)];
    [-(consts.ixy_BJambeAVD),	  consts.iy_BJambeAVD  ,	-(0.0)];
    [-(consts.ixz_BJambeAVD),	-(0.0),	  consts.iz_BJambeAVD]];

com = out.lf_BJambeAVD.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_BJambeAVD.mass;
out.lf_BJambeAVD.tensor6D = [out.lf_BJambeAVD.tensor, block; block', out.lf_BJambeAVD.mass*eye(3)];


out.lf_EpauleAVG.mass   = consts.m_EpauleAVG;
out.lf_EpauleAVG.com    = [0.0; 0.0; 0.0];
out.lf_EpauleAVG.tensor = ...
    [[ consts.ix_EpauleAVG  ,	-(consts.ixy_EpauleAVG),	-(consts.ixz_EpauleAVG)];
    [-(consts.ixy_EpauleAVG),	  consts.iy_EpauleAVG  ,	-(consts.iyz_EpauleAVG)];
    [-(consts.ixz_EpauleAVG),	-(consts.iyz_EpauleAVG),	  consts.iz_EpauleAVG]];

com = out.lf_EpauleAVG.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_EpauleAVG.mass;
out.lf_EpauleAVG.tensor6D = [out.lf_EpauleAVG.tensor, block; block', out.lf_EpauleAVG.mass*eye(3)];


out.lf_HJambeAVG.mass   = consts.m_HJambeAVG;
out.lf_HJambeAVG.com    = [0.0; 0.0; 0.0];
out.lf_HJambeAVG.tensor = ...
    [[ consts.ix_HJambeAVG  ,	-(consts.ixy_HJambeAVG),	-(consts.ixz_HJambeAVG)];
    [-(consts.ixy_HJambeAVG),	  consts.iy_HJambeAVG  ,	-(consts.iyz_HJambeAVG)];
    [-(consts.ixz_HJambeAVG),	-(consts.iyz_HJambeAVG),	  consts.iz_HJambeAVG]];

com = out.lf_HJambeAVG.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_HJambeAVG.mass;
out.lf_HJambeAVG.tensor6D = [out.lf_HJambeAVG.tensor, block; block', out.lf_HJambeAVG.mass*eye(3)];


out.lf_BJambeAVG.mass   = consts.m_BJambeAVG;
out.lf_BJambeAVG.com    = [0.0; 0.0; 0.0];
out.lf_BJambeAVG.tensor = ...
    [[ consts.ix_BJambeAVG  ,	-(consts.ixy_BJambeAVG),	-(consts.ixz_BJambeAVG)];
    [-(consts.ixy_BJambeAVG),	  consts.iy_BJambeAVG  ,	-(consts.iyz_BJambeAVG)];
    [-(consts.ixz_BJambeAVG),	-(consts.iyz_BJambeAVG),	  consts.iz_BJambeAVG]];

com = out.lf_BJambeAVG.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_BJambeAVG.mass;
out.lf_BJambeAVG.tensor6D = [out.lf_BJambeAVG.tensor, block; block', out.lf_BJambeAVG.mass*eye(3)];


out.lf_EpauleARD.mass   = consts.m_EpauleARD;
out.lf_EpauleARD.com    = [0.0; 0.0; 0.0];
out.lf_EpauleARD.tensor = ...
    [[ consts.ix_EpauleARD  ,	-(consts.ixy_EpauleARD),	-(consts.ixz_EpauleARD)];
    [-(consts.ixy_EpauleARD),	  consts.iy_EpauleARD  ,	-(consts.iyz_EpauleARD)];
    [-(consts.ixz_EpauleARD),	-(consts.iyz_EpauleARD),	  consts.iz_EpauleARD]];

com = out.lf_EpauleARD.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_EpauleARD.mass;
out.lf_EpauleARD.tensor6D = [out.lf_EpauleARD.tensor, block; block', out.lf_EpauleARD.mass*eye(3)];


out.lf_HJambeARD.mass   = consts.m_HJambeARD;
out.lf_HJambeARD.com    = [0.0; 0.0; 0.0];
out.lf_HJambeARD.tensor = ...
    [[ consts.ix_HJambeARD  ,	-(consts.ixy_HJambeARD),	-(consts.ixz_HJambeARD)];
    [-(consts.ixy_HJambeARD),	  consts.iy_HJambeARD  ,	-(consts.iyz_HJambeARD)];
    [-(consts.ixz_HJambeARD),	-(consts.iyz_HJambeARD),	  consts.iz_HJambeARD]];

com = out.lf_HJambeARD.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_HJambeARD.mass;
out.lf_HJambeARD.tensor6D = [out.lf_HJambeARD.tensor, block; block', out.lf_HJambeARD.mass*eye(3)];


out.lf_BJambeARD.mass   = consts.m_BJambeARD;
out.lf_BJambeARD.com    = [0.0; 0.0; 0.0];
out.lf_BJambeARD.tensor = ...
    [[ consts.ix_BJambeARD  ,	-(0.0),	-(consts.ixz_BJambeARD)];
    [-(0.0),	  consts.iy_BJambeARD  ,	-(0.0)];
    [-(consts.ixz_BJambeARD),	-(0.0),	  consts.iz_BJambeARD]];

com = out.lf_BJambeARD.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_BJambeARD.mass;
out.lf_BJambeARD.tensor6D = [out.lf_BJambeARD.tensor, block; block', out.lf_BJambeARD.mass*eye(3)];


out.lf_EpauleARG.mass   = consts.m_EpauleARG;
out.lf_EpauleARG.com    = [0.0; 0.0; 0.0];
out.lf_EpauleARG.tensor = ...
    [[ consts.ix_EpauleARG  ,	-(consts.ixy_EpauleARG),	-(consts.ixz_EpauleARG)];
    [-(consts.ixy_EpauleARG),	  consts.iy_EpauleARG  ,	-(consts.iyz_EpauleARG)];
    [-(consts.ixz_EpauleARG),	-(consts.iyz_EpauleARG),	  consts.iz_EpauleARG]];

com = out.lf_EpauleARG.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_EpauleARG.mass;
out.lf_EpauleARG.tensor6D = [out.lf_EpauleARG.tensor, block; block', out.lf_EpauleARG.mass*eye(3)];


out.lf_HJambeARG.mass   = consts.m_HJambeARG;
out.lf_HJambeARG.com    = [0.0; 0.0; 0.0];
out.lf_HJambeARG.tensor = ...
    [[ consts.ix_HJambeARG  ,	-(consts.ixy_HJambeARG),	-(consts.ixz_HJambeARG)];
    [-(consts.ixy_HJambeARG),	  consts.iy_HJambeARG  ,	-(consts.iyz_HJambeARG)];
    [-(consts.ixz_HJambeARG),	-(consts.iyz_HJambeARG),	  consts.iz_HJambeARG]];

com = out.lf_HJambeARG.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_HJambeARG.mass;
out.lf_HJambeARG.tensor6D = [out.lf_HJambeARG.tensor, block; block', out.lf_HJambeARG.mass*eye(3)];


out.lf_BJambeARG.mass   = consts.m_BJambeARG;
out.lf_BJambeARG.com    = [0.0; 0.0; 0.0];
out.lf_BJambeARG.tensor = ...
    [[ consts.ix_BJambeARG  ,	-(consts.ixy_BJambeARG),	-(consts.ixz_BJambeARG)];
    [-(consts.ixy_BJambeARG),	  consts.iy_BJambeARG  ,	-(consts.iyz_BJambeARG)];
    [-(consts.ixz_BJambeARG),	-(consts.iyz_BJambeARG),	  consts.iz_BJambeARG]];

com = out.lf_BJambeARG.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * out.lf_BJambeARG.mass;
out.lf_BJambeARG.tensor6D = [out.lf_BJambeARG.tensor, block; block', out.lf_BJambeARG.mass*eye(3)];


