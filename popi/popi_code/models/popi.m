
%% A structure with the popi robot model in the format described
%% in "A beginner's guide to 6-D vectors (part 2)" by Roy Featherstone.
%%
%% POPI = POPI(consts, params)
%%
%% POPI is the data struct with the robot model
%% parameters.
%% Depending on the original robot model in the Kinematics-DSL format,
%% and on configuration options, this function may take up to two
%% arguments:
%%
%% CONSTS is a struct with all the constant properties
%% of the robot model; it is required if constant-folding was disabled
%% during code generation. Otherwise, the constant numerical properties
%% of the model appear explicitly as float literals.
%%
%% PARAMS is a struct with the current value of the
%% possibly varying model properties, i.e. the model parameters. This
%% argument is required if the original robot model is parametric. If
%% not, ignore the argument.
%%
%% This file has been automatically generated by RobCoGen.

function popi = popi(consts, params)

popi.robotname = 'popi';

popi.NB = 13 + 5;
popi.parent = zeros(1, 12 + 5);

popi.jtype(1:6) = {'Px', 'Py', 'Pz', 'Rx', 'Ry', 'Rz'};
popi.parent(1:6) = [0 1 2 3 4 5];

for i = 1:6
    % For the 'I' field, a loop until i=5 would be enough
    popi.I{i} = mcI( 0, [0,0,0], zeros(3) );
    % 'Xtree' instead must be initialized up to i=6
    popi.Xtree{i} = eye(6);
end

popi.parent(1+6) = 6;
popi.parent(2+6) = 1+6;
popi.parent(3+6) = 2+6;
popi.parent(4+6) = 6;
popi.parent(5+6) = 4+6;
popi.parent(6+6) = 5+6;
popi.parent(7+6) = 6;
popi.parent(8+6) = 7+6;
popi.parent(9+6) = 8+6;
popi.parent(10+6) = 6;
popi.parent(11+6) = 10+6;
popi.parent(12+6) = 11+6;

popi.jtype{1+6} =  'Rz' ;
popi.jtype{2+6} =  'Rz' ;
popi.jtype{3+6} =  'Rz' ;
popi.jtype{4+6} =  'Rz' ;
popi.jtype{5+6} =  'Rz' ;
popi.jtype{6+6} =  'Rz' ;
popi.jtype{7+6} =  'Rz' ;
popi.jtype{8+6} =  'Rz' ;
popi.jtype{9+6} =  'Rz' ;
popi.jtype{10+6} =  'Rz' ;
popi.jtype{11+6} =  'Rz' ;
popi.jtype{12+6} =  'Rz' ;

popi.Xtree{1+6} = rotz(0.0) * roty(-1.5707963705062866) * rotx(0.0) * ...
          xlt([consts.tx_rf_haa_joint consts.ty_rf_haa_joint consts.tz_rf_haa_joint]);
popi.Xtree{2+6} = rotz(-1.5707963705062866) * roty(0.0) * rotx(1.5707963705062866) * ...
          xlt([0.0 consts.ty_rf_hfe_joint 0.0]);
popi.Xtree{3+6} = rotz(0.0) * roty(0.0) * rotx(-3.1415927410125732) * ...
          xlt([consts.tx_rf_kfe_joint consts.ty_rf_kfe_joint 0.0]);
popi.Xtree{4+6} = rotz(0.0) * roty(1.5707963705062866) * rotx(0.0) * ...
          xlt([consts.tx_lf_haa_joint consts.ty_lf_haa_joint consts.tz_lf_haa_joint]);
popi.Xtree{5+6} = rotz(1.5707963705062866) * roty(0.0) * rotx(1.5707963705062866) * ...
          xlt([0.0 consts.ty_lf_hfe_joint 0.0]);
popi.Xtree{6+6} = rotz(0.0) * roty(0.0) * rotx(-3.1415927410125732) * ...
          xlt([consts.tx_lf_kfe_joint consts.ty_lf_kfe_joint 0.0]);
popi.Xtree{7+6} = rotz(0.0) * roty(-1.5707963705062866) * rotx(0.0) * ...
          xlt([consts.tx_rh_haa_joint consts.ty_rh_haa_joint consts.tz_rh_haa_joint]);
popi.Xtree{8+6} = rotz(-1.5707963705062866) * roty(0.0) * rotx(1.5707963705062866) * ...
          xlt([0.0 consts.ty_rh_hfe_joint 0.0]);
popi.Xtree{9+6} = rotz(0.0) * roty(0.0) * rotx(-3.1415927410125732) * ...
          xlt([consts.tx_rh_kfe_joint consts.ty_rh_kfe_joint 0.0]);
popi.Xtree{10+6} = rotz(0.0) * roty(1.5707963705062866) * rotx(0.0) * ...
          xlt([consts.tx_lh_haa_joint consts.ty_lh_haa_joint consts.tz_lh_haa_joint]);
popi.Xtree{11+6} = rotz(1.5707963705062866) * roty(0.0) * rotx(1.5707963705062866) * ...
          xlt([0.0 consts.ty_lh_hfe_joint 0.0]);
popi.Xtree{12+6} = rotz(0.0) * roty(0.0) * rotx(-3.1415927410125732) * ...
          xlt([consts.tx_lh_kfe_joint consts.ty_lh_kfe_joint 0.0]);


tmpI = ...
[[ consts.ix_base  ,	-(0.0),	-(0.0)];
[-(0.0),	  consts.iy_base  ,	-(0.0)];
[-(0.0),	-(0.0),	  consts.iz_base]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_base;
popi.I{6} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];

tmpI = ...
[[ consts.ix_EpauleAVD  ,	-(consts.ixy_EpauleAVD),	-(consts.ixz_EpauleAVD)];
[-(consts.ixy_EpauleAVD),	  consts.iy_EpauleAVD  ,	-(consts.iyz_EpauleAVD)];
[-(consts.ixz_EpauleAVD),	-(consts.iyz_EpauleAVD),	  consts.iz_EpauleAVD]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_EpauleAVD;
popi.I{7} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_HJambeAVD  ,	-(consts.ixy_HJambeAVD),	-(consts.ixz_HJambeAVD)];
[-(consts.ixy_HJambeAVD),	  consts.iy_HJambeAVD  ,	-(consts.iyz_HJambeAVD)];
[-(consts.ixz_HJambeAVD),	-(consts.iyz_HJambeAVD),	  consts.iz_HJambeAVD]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_HJambeAVD;
popi.I{8} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_BJambeAVD  ,	-(consts.ixy_BJambeAVD),	-(consts.ixz_BJambeAVD)];
[-(consts.ixy_BJambeAVD),	  consts.iy_BJambeAVD  ,	-(0.0)];
[-(consts.ixz_BJambeAVD),	-(0.0),	  consts.iz_BJambeAVD]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_BJambeAVD;
popi.I{9} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_EpauleAVG  ,	-(consts.ixy_EpauleAVG),	-(consts.ixz_EpauleAVG)];
[-(consts.ixy_EpauleAVG),	  consts.iy_EpauleAVG  ,	-(consts.iyz_EpauleAVG)];
[-(consts.ixz_EpauleAVG),	-(consts.iyz_EpauleAVG),	  consts.iz_EpauleAVG]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_EpauleAVG;
popi.I{10} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_HJambeAVG  ,	-(consts.ixy_HJambeAVG),	-(consts.ixz_HJambeAVG)];
[-(consts.ixy_HJambeAVG),	  consts.iy_HJambeAVG  ,	-(consts.iyz_HJambeAVG)];
[-(consts.ixz_HJambeAVG),	-(consts.iyz_HJambeAVG),	  consts.iz_HJambeAVG]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_HJambeAVG;
popi.I{11} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_BJambeAVG  ,	-(consts.ixy_BJambeAVG),	-(consts.ixz_BJambeAVG)];
[-(consts.ixy_BJambeAVG),	  consts.iy_BJambeAVG  ,	-(consts.iyz_BJambeAVG)];
[-(consts.ixz_BJambeAVG),	-(consts.iyz_BJambeAVG),	  consts.iz_BJambeAVG]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_BJambeAVG;
popi.I{12} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_EpauleARD  ,	-(consts.ixy_EpauleARD),	-(consts.ixz_EpauleARD)];
[-(consts.ixy_EpauleARD),	  consts.iy_EpauleARD  ,	-(consts.iyz_EpauleARD)];
[-(consts.ixz_EpauleARD),	-(consts.iyz_EpauleARD),	  consts.iz_EpauleARD]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_EpauleARD;
popi.I{13} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_HJambeARD  ,	-(consts.ixy_HJambeARD),	-(consts.ixz_HJambeARD)];
[-(consts.ixy_HJambeARD),	  consts.iy_HJambeARD  ,	-(consts.iyz_HJambeARD)];
[-(consts.ixz_HJambeARD),	-(consts.iyz_HJambeARD),	  consts.iz_HJambeARD]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_HJambeARD;
popi.I{14} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_BJambeARD  ,	-(0.0),	-(consts.ixz_BJambeARD)];
[-(0.0),	  consts.iy_BJambeARD  ,	-(0.0)];
[-(consts.ixz_BJambeARD),	-(0.0),	  consts.iz_BJambeARD]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_BJambeARD;
popi.I{15} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_EpauleARG  ,	-(consts.ixy_EpauleARG),	-(consts.ixz_EpauleARG)];
[-(consts.ixy_EpauleARG),	  consts.iy_EpauleARG  ,	-(consts.iyz_EpauleARG)];
[-(consts.ixz_EpauleARG),	-(consts.iyz_EpauleARG),	  consts.iz_EpauleARG]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_EpauleARG;
popi.I{16} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_HJambeARG  ,	-(consts.ixy_HJambeARG),	-(consts.ixz_HJambeARG)];
[-(consts.ixy_HJambeARG),	  consts.iy_HJambeARG  ,	-(consts.iyz_HJambeARG)];
[-(consts.ixz_HJambeARG),	-(consts.iyz_HJambeARG),	  consts.iz_HJambeARG]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_HJambeARG;
popi.I{17} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ consts.ix_BJambeARG  ,	-(consts.ixy_BJambeARG),	-(consts.ixz_BJambeARG)];
[-(consts.ixy_BJambeARG),	  consts.iy_BJambeARG  ,	-(consts.iyz_BJambeARG)];
[-(consts.ixz_BJambeARG),	-(consts.iyz_BJambeARG),	  consts.iz_BJambeARG]];
tmpC = skew([0.0; 0.0; 0.0]);
tmpM = consts.m_BJambeARG;
popi.I{18} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];

